parameters:
  packageMSIX: false
  publishNuGets: false
  runTests: true

steps:
- checkout: self
  lfs: true # We use LFS to store the checked-in PDBs used as test collateral, at least for now

- task: PowerShell@2
  displayName: 'Establish version number'
  inputs:
    targetType: inline
    script: |
      $versionMinor = $(pipelineYearMonth)
      Write-Host Setting versionMinor variable to $versionMinor
      Write-Host "##vso[task.setvariable variable=versionMinor]$versionMinor"
      $versionPatch = ([Int32]::Parse("$(pipelineDay)").ToString()) + ([Int32]::Parse("$(revision)").ToString("00"))
      Write-Host Setting versionPatch variable to $versionPatch
      Write-Host "##vso[task.setvariable variable=versionPatch]$versionPatch"
      $versionRelease = "$(versionMajor)" + "." + "$versionMinor" + "." + "$versionPatch" + ".0"
      Write-Host Setting versionRelease variable to $versionRelease
      Write-Host "##vso[task.setvariable variable=versionRelease]$versionRelease"

- ${{ if eq(parameters.packageMSIX, true) }}:
    # Update appxmanifest. This must be done before the build.
    - task: PowerShell@2
      displayName: 'Version Package Manifest'
      inputs:
        targetType: inline
        script: |
          $outputFilename = "$(Agent.TempDirectory)\Package.appxmanifest"
          $newVersion = "$(versionRelease)"
          [xml]$manifest = get-content ".\src\SizeBench.GUI.Packaging\Package.appxmanifest"
          $manifest.Package.Identity.Version = $newVersion
          Write-Host Setting Package Identity Version to $newVersion
          $manifest.save($outputFilename)
          Write-Host "Setting AppxManifestPathOverride to $outputFilename"
          Write-Host "##vso[task.setvariable variable=AppxManifestPathOverride]$outputFilename"

- task: UseDotNet@2
  displayName: 'Use .NET 8 SDK'
  inputs:
    packageType: sdk
    version: 8.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    feedsToUse: config
    nugetConfigPath: src/NuGet.config
    verbosityRestore: 'minimal'
    projects: src/SizeBench.sln

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    projects: '**/*.csproj'
    arguments: '--no-restore --configuration $(buildConfiguration) -p:Version=$(versionRelease)'


- ${{ if eq(parameters.runTests, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'dotnet --list-runtimes'
    inputs:
      command: custom
      custom: '--list-runtimes'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet --list-sdks'
    inputs:
      command: custom
      custom: '--list-sdks'

  # 'dotnet test --blame-crash' requires procdump.exe to capture full dumps of native crashes.
  # We need this because the tests can crash sometimes and this is the only way I've found to get a dump out to debug from the pipeline.
  - task: PowerShell@2
    displayName: 'Install ProcDump'
    inputs:
      targetType: inline
      script: |
        # Make downloads faster by not reporting progress that we can't see in the ADO UI anyway (https://github.com/Azure/powershell/issues/48)
        $ProgressPreference = 'SilentlyContinue';

        # Install Procdump
        Write-Host "Starting ProcDump install to capture test crashes if they happen"
        if (-Not (Test-Path "$(Agent.TempDirectory)\procdump")) {
          Write-Host "Creating directory $(Agent.TempDirectory)\procdump"
          mkdir "$(Agent.TempDirectory)\procdump"
          Invoke-WebRequest -UserAgent wget -Uri https://download.sysinternals.com/files/Procdump.zip -OutFile "$(Agent.TempDirectory)\procdump\procdump.zip"
          Expand-Archive -LiteralPath "$(Agent.TempDirectory)\procdump\procdump.zip" -DestinationPath "$(Agent.TempDirectory)\procdump"
        }
        Write-Host "Setting PROCDUMP_PATH to $(Agent.TempDirectory)\procdump"
        Write-Host "##vso[task.setvariable variable=PROCDUMP_PATH]$(Agent.TempDirectory)\procdump"
        Write-Host "Setting VSTEST_DUMP_FORCEPROCDUMP=1 to ensure native crash dumps are collected"
        Write-Host "##vso[task.setvariable variable=VSTEST_DUMP_FORCEPROCDUMP]1"

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: '**/*.csproj'
      arguments: '--no-restore --configuration $(buildConfiguration) --blame-crash --settings src\RunSettings.runsettings $(codeCoverageArgs)'
      testRunTitle: 'Tests for $(buildConfiguration)'
      publishTestResults: true


- ${{ if eq(parameters.packageMSIX, true) }}:
  - task: MSBuild@1
    displayName: 'Publish MSIX'
    condition: and(succeeded(), eq(variables['buildConfiguration'], 'Release'))
    inputs:
      solution: src/SizeBench.GUI.Packaging/SizeBench.GUI.Packaging.wapproj
      msbuildArguments: '/p:AppxPackageDir="$(Build.ArtifactStagingDirectory)\MSIX\$(buildConfiguration)" /p:Version=$(versionRelease) /p:UapAppxPackageBuildMode=StoreAndSideload /p:AppxManifestPathOverride="$(AppxManifestPathOverride)" /bl:logfile="$(Build.ArtifactStagingDirectory)\MSIX\$(buildConfiguration)\wap.binlog"'
      configuration: $(buildConfiguration)
      platform: $(buildPlatform)
      maximumCpuCount: true

  - task: PowerShell@2
    displayName: 'Check MSIX for common regressions'
    condition: and(succeeded(), eq(variables['buildConfiguration'], 'Release'))
    inputs:
      targetType: inline
      script: |
        $Package = Get-ChildItem -Recurse -Path "$(Build.ArtifactStagingDirectory)\MSIX\$(buildConfiguration)" -Filter "SizeBench.GUI*.appx"
        .\build\Test-SizeBenchPackage.ps1 -Verbose -Path $Package.FullName


- task: DotNetCoreCLI@2
  displayName: 'dotnet publish SKUCrawler'
  condition: and(succeeded(), eq(variables['buildConfiguration'], 'Release'))
  inputs:
    command: publish
    publishWebProjects: false
    modifyOutputPath: false
    zipAfterPublish: false
    projects: 'src\SizeBench.SKUCrawler\SizeBench.SKUCrawler.csproj'
    arguments: '-c $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack SKUCrawler'
  condition: and(succeeded(), eq(variables['buildConfiguration'], 'Release'))
  inputs:
    command: custom
    projects: 'src\SizeBench.SKUCrawler\SizeBench.SKUCrawler.csproj'
    custom: pack
    arguments: '--no-build --output "$(Build.ArtifactStagingDirectory)\NuGets" /p:Configuration=$(BuildConfiguration) /p:PackageVersion=$(versionRelease)'


- task: CopyFiles@2
  displayName: 'Copy failure dumps'
  condition: failed()
  inputs:
    sourceFolder: '$(Agent.TempDirectory)'
    contents: '**\*.dmp'
    targetFolder: '$(Build.ArtifactStagingDirectory)\failure-dumps'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: or(failed(), eq(variables['buildConfiguration'], 'Release'))
  inputs:
    artifactName: 'drop'
    parallel: true
    pathToPublish: $(Build.ArtifactStagingDirectory)

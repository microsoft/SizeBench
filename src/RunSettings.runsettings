<?xml version="1.0" encoding="utf-8"?>
<!-- File name extension must be .runsettings -->
<RunSettings>
  <!-- Configurations that affect the Test Framework -->
  <RunConfiguration>
    <!-- Path relative to solution directory -->
    <ResultsDirectory>.\TestResults</ResultsDirectory>
    <TargetPlatform>x64</TargetPlatform>
    <TargetFrameworkVersion>.NETCoreApp, Version=8.0</TargetFrameworkVersion>

    <!-- Timeout is in milliseconds, so this is 3 hours, because
         the PGO tests can be very slow to be exhaustive. -->
    <TestSessionTimeout>10800000</TestSessionTimeout>
    
    <!-- MaxCpuCount, when used, seems to cause VS to be unable to display code coverage % covered properly, so disabling... -->
    <!-- <MaxCpuCount>4</MaxCpuCount> -->
  </RunConfiguration>

  <DataCollectionRunSettings>
    <DataCollectors>
      <!-- The blame data collector will help attribute any tests that cause the test host process to crash -->
      <DataCollector friendlyName="blame" enabled="True">
      </DataCollector>
      
      <DataCollector friendlyName="Code Coverage" uri="datacollector://Microsoft/CodeCoverage/2.0"
                     assemblyQualifiedName="Microsoft.VisualStudio.Coverage.DynamicCoverageDataCollector, Microsoft.VisualStudio.TraceCollector, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
        <Configuration>
          <CLRIEInstrumentationNetCore>True</CLRIEInstrumentationNetCore>
          <CLRIEInstrumentationNetFramework>True</CLRIEInstrumentationNetFramework>
          <UseManagedVanguard>True</UseManagedVanguard>
          <CodeCoverage>
            <!--
            Additional paths to search for .pdb (symbol) files. Symbols must be found for modules to be instrumented.
            If .pdb files are in the same folder as the .dll or .exe files, they are automatically found. Otherwise, specify them here.
            Note that searching for symbols increases code coverage runtime. So keep this small and local.
            -->
            <!--           
            <SymbolSearchPaths>              
                   <Path>C:\Users\User\Documents\Visual Studio 2013\Projects\ProjectX\bin\Debug</Path>
                   <Path>\\mybuildshare\builds\ProjectX</Path>
            </SymbolSearchPaths>
-->

            <!--
            About include/exclude lists:
            Empty "Include" clauses imply all; empty "Exclude" clauses imply none.
            Each element in the list is a regular expression (ECMAScript syntax). See http://msdn.microsoft.com/library/2k3te2cs.aspx.
            An item must first match at least one entry in the include list to be included.
            Included items must then not match any entries in the exclude list to remain included.
            -->

            <!-- Match assembly file paths: -->
            <ModulePaths>
              <Include>
                <ModulePath>.*\.dll$</ModulePath>
                <ModulePath>.*\.exe$</ModulePath>
              </Include>
              <Exclude>
                <ModulePath>.*CPPUnitTestFramework.*</ModulePath>
                <ModulePath>.*TestAdapter.*</ModulePath>
                <ModulePath>.*SizeBench.*TestInfrastructure.*</ModulePath>
                <ModulePath>.*SizeBench.*Tests\.dll$</ModulePath>
                <ModulePath>.*SizeBench.*TestDataCommon\.dll$</ModulePath>
                <ModulePath>.*DiffPlex.*</ModulePath>
                <ModulePath>.*moq\.dll$</ModulePath>
                <ModulePath>.*SizeBench.*TestData.*</ModulePath>
                <!-- Exclude Test PEs so we don't instrument the checked-in test collateral, which can subtly change it -->
                <ModulePath>.*Test PEs.*</ModulePath>
                <ModulePath>.*TestPEs.*</ModulePath>
              </Exclude>
            </ModulePaths>

            <!-- Match fully qualified names of functions: -->
            <!-- (Use "\." to delimit namespaces in C# or Visual Basic, "::" in C++.)  -->
            <Functions>
              <Exclude>
                <Function>^std::.*</Function>
                <Function>^ATL::.*</Function>
                <Function>.*::__GetTestMethodInfo.*</Function>
                <Function>^Microsoft::VisualStudio::CppCodeCoverageFramework::.*</Function>
                <Function>^Microsoft::VisualStudio::CppUnitTestFramework::.*</Function>
                <Function>^System.Text.RegularExpressions.Generated.*</Function>
                <!-- WinRT interop code generates these WinRT.* functions, we can exclude them since we don't use most of them anyway -->
                <Function>^WinRT.*</Function>
              </Exclude>
            </Functions>

            <!-- Match attributes on any code element: -->
            <Attributes>
              <Exclude>
                <!-- Don’t forget "Attribute" at the end of the name -->
                <Attribute>^System.Diagnostics.DebuggerHiddenAttribute$</Attribute>
                <Attribute>^System.Diagnostics.DebuggerNonUserCodeAttribute$</Attribute>
                <Attribute>^System.Runtime.CompilerServices.CompilerGeneratedAttribute$</Attribute>
                <Attribute>^System.CodeDom.Compiler.GeneratedCodeAttribute$</Attribute>
                <Attribute>^System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute$</Attribute>
                <Attribute>^NUnit.Framework.TestFixtureAttribute$</Attribute>
                <Attribute>^Xunit.FactAttribute$</Attribute>
                <Attribute>^Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute$</Attribute>
              </Exclude>
            </Attributes>

            <!-- Match the path of the source files in which each method is defined: -->
            <Sources>
              <Exclude>
                <Source>.*\\atlmfc\\.*</Source>
                <Source>.*\\vctools\\.*</Source>
                <Source>.*\\public\\sdk\\.*</Source>
                <Source>.*\\microsoft sdks\\.*</Source>
                <Source>.*\\vc\\include\\.*</Source>
              </Exclude>
            </Sources>

            <!-- Match the company name property in the assembly: -->
            <CompanyNames>
              <Exclude>
                <CompanyName>.*microsoft.*</CompanyName>
              </Exclude>
            </CompanyNames>

            <!-- Match the public key token of a signed assembly: -->
            <PublicKeyTokens>
              <!-- Exclude Visual Studio extensions: -->
              <Exclude>
                <PublicKeyToken>^B77A5C561934E089$</PublicKeyToken>
                <PublicKeyToken>^B03F5F7F11D50A3A$</PublicKeyToken>
                <PublicKeyToken>^31BF3856AD364E35$</PublicKeyToken>
                <PublicKeyToken>^89845DCD8080CC91$</PublicKeyToken>
                <PublicKeyToken>^71E9BCE111E9429C$</PublicKeyToken>
                <PublicKeyToken>^8F50407C4E9E73B6$</PublicKeyToken>
                <PublicKeyToken>^E361AF139669C375$</PublicKeyToken>
              </Exclude>
            </PublicKeyTokens>

            <UseVerifiableInstrumentation>False</UseVerifiableInstrumentation>
            <ForceVerifiableInstrumentation>False</ForceVerifiableInstrumentation>
            <AllowLowIntegrityProcesses>True</AllowLowIntegrityProcesses>
            <CollectFromChildProcesses>False</CollectFromChildProcesses>
            <CollectAspDotNet>False</CollectAspDotNet>
            <UseManagedInstrumentation>True</UseManagedInstrumentation>
            <SkipNativeInstrumentation>True</SkipNativeInstrumentation>
          </CodeCoverage>
        </Configuration>
      </DataCollector>
    </DataCollectors>
  </DataCollectionRunSettings>

  <!-- This collector captures a ScreenCapture.wmv video of the test running, which can be really useful for debugging UI test failures.  Currently, SizeBench doesn't do any UI testing
           so this collector is disabled.  It adds a lot to the test runtime, as you can imagine, what with encoding a ton of videos.
           Leaving it here, though, since it was a bit hard to find in the docs and it might be useful someday. -->
  <!-- 
      <DataCollector uri="datacollector://microsoft/VideoRecorder/1.0" assemblyQualifiedName="Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder.VideoRecorderDataCollector, Microsoft.VisualStudio.TestTools.DataCollection.VideoRecorder, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" friendlyName="Screen and Voice Recorder"/>
      -->

  <!-- Adapter Specific sections -->

  <!-- MSTest adapter -->
  <MSTest>
    <MapInconclusiveToFailed>True</MapInconclusiveToFailed>
    <CaptureTraceOutput>true</CaptureTraceOutput>
    <DeleteDeploymentDirectoryAfterTestRunIsComplete>true</DeleteDeploymentDirectoryAfterTestRunIsComplete>
    <DeploymentEnabled>True</DeploymentEnabled>
    <InProcMode>false</InProcMode>

    <!-- Test Impact Analysis is a really cool feature that only runs the tests impacted by a change in incremental builds.  But it's becoming too unstable as
         SizeBench takes dependencies on things with difficult deployments, like the DbgX APIs.  Frequently, not enough stuff is getting
         put in the Deployment folder, resulting in tests failing that then pass when run in the full test pass.  The test run is currently fast enough (~45s)
         that it's just not worth it to keep trying to fix that, so disabling TIA is the answer for now. -->
    <IgnoreTestImpact>true</IgnoreTestImpact>
  </MSTest>
</RunSettings>
